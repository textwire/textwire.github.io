import{_ as l,r as i,o as c,c as u,a,d as n,e as t,w as e,b as o}from"./app-D0pDhv0Q.js";const r={},d=a("h1",{id:"getting-started",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#getting-started"},[a("span",null,"Getting Started")])],-1),h=a("p",null,"Welcome to Textwire, a powerful template evaluate designed for Go developers. Textwire provides a seamless way to inject variables into your HTML files, making it easier to create dynamic and data-driven content. This guide will walk you through the essential steps to get started with Textwire in your Go projects.",-1),k=o(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>Install the Textwire package in your Go environment. You can do this by running the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go get <span class="token parameter variable">-u</span> github.com/textwire/textwire
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="usage-with-templates" tabindex="-1"><a class="header-anchor" href="#usage-with-templates"><span>Usage with Templates</span></a></h2><h3 id="template-configuration" tabindex="-1"><a class="header-anchor" href="#template-configuration"><span>Template Configuration</span></a></h3><p>To use Textwire as a template language, you need to import the <code>github.com/textwire/textwire</code> package and create a new Template instance. You can ether pass <code>nil</code> or a <code>*textwire.Config</code> to the <code>NewTemplate</code> function. The <code>*textwire.Config</code> is used to configure the template language.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> textwire<span class="token punctuation">.</span><span class="token function">NewTemplate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>textwire<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
        TemplateDir<span class="token punctuation">:</span> <span class="token string">&quot;src/templates&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Non of the configurations are required, because each configuration has a default value. The <code>NewTemplate</code> function returns 2 values:</p><ol><li><code>*textwire.Template</code> is a struct that holds the parsed templates and has methods to evaluate the templates.</li><li><code>error</code> is the error that might occur during any stage of the template parsing.</li></ol><p>In return from the <code>NewTemplate</code> function, we get a <code>Template</code> object that can be used to evaluate an already parsed template.</p><h4 id="available-configurations" tabindex="-1"><a class="header-anchor" href="#available-configurations"><span>Available Configurations</span></a></h4><table><thead><tr><th>Property</th><th>Type</th><th>Description of the configuration</th><th>Example value</th><th>Default value</th></tr></thead><tbody><tr><td><code>TemplateDir</code></td><td><code>string</code></td><td>The directory where Textwire will look for template files</td><td><code>&quot;src/templates&quot;</code></td><td><code>&quot;templates&quot;</code></td></tr><tr><td><code>TemplateExt</code></td><td><code>string</code></td><td>The extension of the template files</td><td><code>&quot;.html&quot;</code></td><td><code>&quot;.tw.html&quot;</code></td></tr></tbody></table>`,12),m={class:"custom-container warning"},g=a("p",{class:"custom-container-title"},"WARNING",-1),v=a("code",null,"TemplateExt",-1),b=a("code",null,".tw.html",-1),f={href:"https://marketplace.visualstudio.com/items?itemName=SerhiiCho.textwire",target:"_blank",rel:"noopener noreferrer"},w=o(`<h3 id="write-response-to-the-client" tabindex="-1"><a class="header-anchor" href="#write-response-to-the-client"><span>Write response to the client</span></a></h3><p>You can use the <code>Response</code> method on <code>Template</code> object to write the evaluated template to the client. The <code>Response</code> method accepts a <code>http.ResponseWriter</code> object, the name of the template file, and a map of variables that you want to inject into the template. Here is an example:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">homeHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	err <span class="token operator">:=</span> tpl<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;Home page&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;names&quot;</span><span class="token punctuation">:</span>     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jill&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;showNames&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="layouts" tabindex="-1"><a class="header-anchor" href="#layouts"><span>Layouts</span></a></h3><p>Defining a layout in Textwire is very simple. You need to create a file anywhere inside of your template files. Many developers just create a &quot;layouts&quot; directory for different layouts because you might have a main layout, one for admin panel, one for user cabinet and so on.</p><h4 id="reserve-space-in-the-layout" tabindex="-1"><a class="header-anchor" href="#reserve-space-in-the-layout"><span>Reserve space in the layout</span></a></h4><p>The <code>reserve</code> statement (directive) is used to reserve a place for dynamic content that you can insert later in the layout. For example, you can reserve a place for the title of the page and then insert it later. Here is an example:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>@reserve(&quot;title&quot;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    @reserve(&quot;content&quot;)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We reserve a place for the title and content of the page. We can then insert the title and content into these reserved places.</p><h4 id="insert-content-into-reserved-space" tabindex="-1"><a class="header-anchor" href="#insert-content-into-reserved-space"><span>Insert content into reserved space</span></a></h4><p>The <code>insert</code> statement (directive) is used to insert content into reserved places. Insert statement can be defined in 2 ways, with and without the body. In the example below, we define the insert for &quot;title&quot; without the body, and for &quot;content&quot; with the body.</p><p>Let&#39;s take a look at the example how I would define a <code>home.tw.html</code> and then I&#39;ll explain each part of it:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@use(&quot;layouts/main&quot;)

@insert(&quot;title&quot;, &quot;Home page&quot;)

@insert(&quot;content&quot;)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a home page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>First, we tell which layout we want to use by providing a path to the layout</li><li>Then we insert the title into layout with the value &quot;Home page&quot;</li><li>Then we insert the content into layout with the HTML body.</li></ul>`,14),y=o(`<h2 id="evaluate-a-string" tabindex="-1"><a class="header-anchor" href="#evaluate-a-string"><span>Evaluate a string</span></a></h2><p>You can use the <code>EvaluateString</code> function to compile and evaluate a string containing Textwire code. The <code>EvaluateString</code> function accepts a string and a map of variables that you want to inject into the string. Here is an example:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>inp <span class="token operator">:=</span> <span class="token string">\`Hello &lt;b&gt;{{ name }}&lt;/b&gt;! Congratulations on your {{ age }}th birthday!\`</span>

result<span class="token punctuation">,</span> err <span class="token operator">:=</span> textwire<span class="token punctuation">.</span><span class="token function">EvaluateString</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Serhii&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">33</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="evaluate-a-file" tabindex="-1"><a class="header-anchor" href="#evaluate-a-file"><span>Evaluate a file</span></a></h2><p>Evaluating a file can be done with the <code>EvaluateFile</code> function. The <code>EvaluateFile</code> function accepts a path to the file that contains Textwire code and a map of variables that you want to inject into the file. Here is an example:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>path <span class="token operator">:=</span> <span class="token string">&quot;path/to/file.tw.html&quot;</span>

result<span class="token punctuation">,</span> err <span class="token operator">:=</span> textwire<span class="token punctuation">.</span><span class="token function">EvaluateFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Anna&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>  <span class="token number">25</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function x(q,T){const s=i("RouteLink"),p=i("ExternalLinkIcon");return c(),u("div",null,[d,h,a("p",null,[n("Textwire has an elegant and easy-to-use syntax that is designed to be familiar to developers who have experience with other template languages. On the "),t(s,{to:"/1.x/language-elements/"},{default:e(()=>[n("Language Elements")]),_:1}),n(" page you can find all the available statements and directives that you can use in your Textwire templates.")]),k,a("div",m,[g,a("p",null,[n("Keep in mind that if you use VSCode and you change "),v,n(" to something else than "),b,n(", you will lose the syntax highlighting for Textwire files if you use the "),a("a",f,[n("Textwire extension"),t(p)]),n(".")])]),w,a("p",null,[n("You can read more about "),t(s,{to:"/1.x/language-elements/#use-statement"},{default:e(()=>[n("use")]),_:1}),n(", "),t(s,{to:"/1.x/language-elements/#insert-statement"},{default:e(()=>[n("insert")]),_:1}),n(" and "),t(s,{to:"/1.x/language-elements/#reserve-statement"},{default:e(()=>[n("reserve")]),_:1}),n(" statements on the "),t(s,{to:"/1.x/language-elements/#statements"},{default:e(()=>[n("statements")]),_:1}),n(" page if you need more information about the syntax.")]),y])}const E=l(r,[["render",x],["__file","index.html.vue"]]),N=JSON.parse('{"path":"/1.x/getting-started/","title":"Getting Started","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Usage with Templates","slug":"usage-with-templates","link":"#usage-with-templates","children":[{"level":3,"title":"Template Configuration","slug":"template-configuration","link":"#template-configuration","children":[]},{"level":3,"title":"Write response to the client","slug":"write-response-to-the-client","link":"#write-response-to-the-client","children":[]},{"level":3,"title":"Layouts","slug":"layouts","link":"#layouts","children":[]}]},{"level":2,"title":"Evaluate a string","slug":"evaluate-a-string","link":"#evaluate-a-string","children":[]},{"level":2,"title":"Evaluate a file","slug":"evaluate-a-file","link":"#evaluate-a-file","children":[]}],"git":{"updatedTime":1710771326000,"contributors":[{"name":"SerhiiCho","email":"serhiicho@protonmail.com","commits":19}]},"filePathRelative":"1.x/getting-started/index.md"}');export{E as comp,N as data};
