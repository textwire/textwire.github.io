"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/10/24/textwire-v2.1.0-release-notes","metadata":{"permalink":"/blog/2024/10/24/textwire-v2.1.0-release-notes","source":"@site/blog/2024-10-24-textwire-v2.1.0-release-notes/index.md","title":"v2.1.0 Release Notes","description":"Get to know details about the Textwire version 2.1.0 release by reading the complete release notes","date":"2024-10-24T00:00:00.000Z","tags":[{"inline":false,"label":"Version Release Notes","permalink":"/blog/tags/release","description":"The latest version release notes"}],"readingTime":3.95,"hasTruncateMarker":true,"authors":[{"name":"Serhii Cho","title":"Full Stack Engineer","url":"https://serhii.io","page":{"permalink":"/blog/authors/serhiicho"},"socials":{"x":"https://x.com/SerhiiCho","github":"https://github.com/SerhiiCho","linkedin":"https://www.linkedin.com/in/serhiicho/"},"imageURL":"https://github.com/SerhiiCho.png","key":"serhiicho"}],"frontMatter":{"title":"v2.1.0 Release Notes","description":"Get to know details about the Textwire version 2.1.0 release by reading the complete release notes","authors":["serhiicho"],"tags":["release"]},"unlisted":false,"nextItem":{"title":"Introducing Textwire: A Domain-Specific Language for Go","permalink":"/blog/2024/10/20/introducing-textwire-a-domain-specific-language-for-go"}},"content":"The Textwire version `v2.0.0` brought us an ability to define [custom functions](/docs/v2/guides/custom-functions) and had lots of code refactoring and improvements. I\'m very happy to introduce Textwire version `v2.1.0` with new built-in functions, improved error handling, and other improvements.\\n\\n\x3c!-- truncate --\x3e\\n\\n## 15 New Built-in Functions\\n### 4 New array functions\\nTextwire is very young but it\'s growing. I\'m happy to introduce **3 new built-in functions** for array literals. You can read more about them in the [array functions](/docs/v2/functions/arr) documentation. Here is the short overview of them:\\n\\n- `rand()` - Returns a random element from an array\\n- `reverse()` - Reverses the elements of an array and returns a new array\\n- `slice(start: int, end?: int)` - Returns a portion of an array\\n- `shuffle()` - Shuffles the elements of an array and returns a new array\\n\\n### 2 New integer functions\\nRead more about them in the [integer functions](/docs/v2/functions/int) documentation.\\n\\n- `abs(): int` - Returns the absolute value of an integer. If the integer is negative, it will return the positive value of it\\n- `str(): str` - Converts an integer to a string and returns it\\n\\n### 5 New float functions\\nRead more about them in the [float functions](/docs/v2/functions/float) documentation.\\n\\n- `abs(): float` - Returns the absolute value of a float. If the float is negative, it will return the positive value of it\\n- `ceil(): int` - Returns the rounded up value of a float to the nearest integer\\n- `floor(): int` - Returns the rounded down value of a float to the nearest integer\\n- `round(): int` - Rounds a float to the nearest integer. `1.5 -> 2`, `1.4 -> 1`, `1.6 -> 2`\\n- `str(): str` - Returns converted float to a string\\n\\n### 3 New string functions\\nRead more about them in the [string functions](/docs/v2/functions/str) documentation.\\n\\n- `capitalize(): bool` - Capitalizes the first letter of a string\\n- `reverse(): bool` - Reverses the characters of a string\\n- `contains(substr: str): bool` - Returns `true` if a string contains a substring, otherwise `false`\\n\\n### 1 New boolean function\\nRead more about it in the [boolean functions](/docs/v2/functions/bool) documentation.\\n\\n- `binary(): int` - Returns an integer `1` if the receiver is true, `0` otherwise\\n\\n## Improvements\\nRegarding improvements, I placed a strong emphasis on proper error handling. I cannot overstate the importance of having effective error handling in place when things go wrong. Receiving clear and detailed error messages is crucial for success. Here are the enhancements introduced in version `v2.1.0`:\\n\\n- \ud83d\udc1b **Fixed Bug with Prefix Expression Precedence**: Resolved an issue where prefix expressions like `{{ -1.abs() }}` were not being processed correctly. Previously, the parser evaluated the expression as `{{ (-(1.abs())) }}`, resulting in an incorrect output of `-1`. Now, the parser correctly handles the precedence, evaluating it as `{{ ((-1).abs()) }}`.\\n- \ud83e\uddd1\u200d\ud83d\udcbb **Enhanced Error Handling for Built-in Functions:** Improved error messages when an incorrect argument type is passed to a built-in function. Users will now receive clear error messages indicating the type mismatch.\\n- \ud83e\uddd1\u200d\ud83d\udcbb **Enhanced Error Handling for Custom Functions:** If a function is called on a type where it doesn\u2019t exist, Textwire now provides a detailed error message specifying that the function is undefined for that type. For example, an error message might read: `[Textwire ERROR in /var/www/html/templates/home.tw.html:3]: function \'some\' doesn\'t exist for type \'STRING\'`.\\n- \ud83e\uddd1\u200d\ud83d\udcbb **Enhanced Error Handling for Division by Zero:** Improved error messages for division-by-zero cases, replacing previous vague messages with more meaningful ones.\\n- \ud83e\uddd1\u200d\ud83d\udcbb New error page while rendering a template. Instead of black screen we now get a simple error page with `Sorry! We\u2019re having some trouble right now. Please check back shortly`. You can find more information [here](/docs/v2/guides/error-handling)\\n\\n#### New error page:\\n![Error output in Textwire](/img/oops.png)\\n\\n## Other changes\\nSome very small changes were made to the Textwire that don\'t effect any functionality. Here are they:\\n- \ud83d\udcdd Remove `CONTRIBUTING.md` file that was added in `v2.0.0`. It doesn\'t have any important information, it\'s better to make a better one in the future\\n\\n## Conclusion\\nVersion `v2.1.0` of Textwire brings a host of new built-in functions, improved error handling, and other enhancements. I hope you enjoy using Textwire as much as I enjoy developing it. If you have any questions or feedback, please don\'t hesitate to reach out to me. I\'m always happy to help. Thank you for your continued support and feedback. Stay tuned for more updates and improvements in the future. Happy coding! \ud83d\ude80\\n\\n## What\'s next?\\nIn the next version, I\'ll focus on further improvements to the language, including new built-in functions, better error handling, more tests, and the ability to define a custom error page for templates. Stay tuned for more updates and improvements in the future. Happy coding! \ud83d\ude80"},{"id":"/2024/10/20/introducing-textwire-a-domain-specific-language-for-go","metadata":{"permalink":"/blog/2024/10/20/introducing-textwire-a-domain-specific-language-for-go","source":"@site/blog/2024-10-20-introducing-textwire-a-domain-specific-language-for-go/index.md","title":"Introducing Textwire: A Domain-Specific Language for Go","description":"We are very happy to introduce Textwire to help you work with templates in Go","date":"2024-10-20T00:00:00.000Z","tags":[{"inline":false,"label":"Story","permalink":"/blog/tags/story","description":"The story behind Textwire"}],"readingTime":2.12,"hasTruncateMarker":true,"authors":[{"name":"Serhii Cho","title":"Full Stack Engineer","url":"https://serhii.io","page":{"permalink":"/blog/authors/serhiicho"},"socials":{"x":"https://x.com/SerhiiCho","github":"https://github.com/SerhiiCho","linkedin":"https://www.linkedin.com/in/serhiicho/"},"imageURL":"https://github.com/SerhiiCho.png","key":"serhiicho"}],"frontMatter":{"title":"Introducing Textwire: A Domain-Specific Language for Go","description":"We are very happy to introduce Textwire to help you work with templates in Go","authors":["serhiicho"],"image":"./cover.png","tags":["story"]},"unlisted":false,"prevItem":{"title":"v2.1.0 Release Notes","permalink":"/blog/2024/10/24/textwire-v2.1.0-release-notes"}},"content":"![Introducing Textwire: A Domain-Specific Language for Go](./cover.png)\\n\\nWhat was the motivation to create Textwire? How does it work? What are the benefits of using it, and should you use it in your next Go project? In this article, we will answer these questions and more.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s Textwire?\\n\\n**Textwire is a domain-specific language (DSL) for Go that offers a simple, flexible, and declarative syntax for the front end.** It enables you to handle business logic on the backend and pass the processed data to Textwire templates.\\n\\nHere\u2019s a quick example of what a basic Textwire template looks like:\\n\\n```textwire title=\\"index.tw.html\\"\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n    <meta charset=\\"UTF-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n    <title>My blog</title>\\n</head>\\n<body>\\n    @if(age < 18)\\n        <p>You are under 18 years old</p>\\n    @end\\n</body>\\n</html>\\n```\\n\\nAs shown, the syntax is clean and intuitive. You can also incorporate else-if conditions, loops, components, and more, making Textwire a powerful tool for template management in Go.\\n\\n## Why Textwire over other template engines?\\n**Textwire is more than just another template engine for Go\u2014it allows you to evaluate strings or files containing Textwire code.** This means you can seamlessly integrate logic into your email templates, markdown files, or any other text-based content.\\n\\nAdditionally, Textwire comes with a [VSCode extension](https://marketplace.visualstudio.com/items?itemName=SerhiiCho.textwire) that offers syntax highlighting and icons for Textwire files, making template development even more straightforward.\\n\\n![Textwire VSCode extension screenshot](./custom-icons.jpg)\\n\\nHere are some of the key benefits of using Textwire:\\n- **Error handling.** Textwire provides detailed error messages with line numbers and file names, making it easier to debug your templates\\n- **Performance.** Textwire is fast and has a low memory footprint, making it load pages quickly. The parsing is done at application startup, so there is no overhead during runtime\\n- **Flexibility.** Textwire allows you to define custom functions and components, giving you the flexibility to create complex templates with ease\\n- **Security.** Textwire is designed to be secure by default, preventing code injection attacks when printing user-generated content\\n- **Support.** Textwire is constantly being improved and updated. Which means you can rely on it for your projects\\n- **Good documentation.** Textwire has a comprehensive documentation that covers all the features and provides examples to help you get started\\n\\n![Textwire VSCode extension screenshot](./textwire-code.jpg)\\n\\n## Resources\\n\\nFor all the details on how to get started with Textwire, check out the [official documentation](/docs/v2/introduction). You can also find the source code on [GitHub](https://github.com/textwire/textwire). If you have any requests or suggestions that will help improve Textwire, feel free to open an [issue](https://github.com/textwire/textwire/issues/new) or submit a pull request."}]}}')}}]);