"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5593],{7766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var l=t(4848),i=t(8453);const s={sidebar_position:1,description:"Explore the various string functions available in Textwire"},r="String functions",a={id:"functions/str",title:"String functions",description:"Explore the various string functions available in Textwire",source:"@site/versioned_docs/version-v2/functions/str.md",sourceDirName:"functions",slug:"/functions/str",permalink:"/docs/v2/functions/str",draft:!1,unlisted:!1,tags:[],version:"v2",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Explore the various string functions available in Textwire"},sidebar:"tutorialSidebar",previous:{title:"Built-in functions",permalink:"/docs/v2/functions/"},next:{title:"Array functions",permalink:"/docs/v2/functions/arr"}},d={},c=[{value:"<code>raw()</code>",id:"raw",level:2},{value:"Input example",id:"input-example",level:4},{value:"Output",id:"output",level:4},{value:"<code>split()</code>",id:"split",level:2},{value:"Arguments",id:"arguments",level:4},{value:"Input example",id:"input-example-1",level:4},{value:"Output",id:"output-1",level:4},{value:"<code>trim()</code>",id:"trim",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"Input example",id:"input-example-2",level:4},{value:"Output",id:"output-2",level:4},{value:"<code>len()</code>",id:"len",level:2},{value:"Input example",id:"input-example-3",level:4},{value:"Output",id:"output-3",level:4},{value:"<code>lower()</code>",id:"lower",level:2},{value:"Input example",id:"input-example-4",level:4},{value:"Output",id:"output-4",level:4},{value:"<code>upper()</code>",id:"upper",level:2},{value:"Input example",id:"input-example-5",level:4},{value:"Output",id:"output-5",level:4}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"string-functions",children:"String functions"})}),"\n",(0,l.jsx)(n.h2,{id:"raw",children:(0,l.jsx)(n.code,{children:"raw()"})}),"\n",(0,l.jsxs)(n.p,{children:["Function ",(0,l.jsx)(n.code,{children:"raw"})," is used to render a string as raw HTML. This is useful when you want to render HTML tags from a string. By default, HTML tags in a string are escaped to prevent XSS attacks"]}),"\n",(0,l.jsx)(n.h4,{id:"input-example",children:"Input example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'{{ "<h1>Test</h1>".raw() }}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"output",children:"Output"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<h1>Test</h1>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"split",children:(0,l.jsx)(n.code,{children:"split()"})}),"\n",(0,l.jsxs)(n.p,{children:["Function ",(0,l.jsx)(n.code,{children:"split"})," is used to split a string into an array of substrings. It takes an optional argument ",(0,l.jsx)(n.code,{children:"separator"})," which is used to split the string. If no separator is provided, it defaults to a space"]}),"\n",(0,l.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"separator"}),' (optional) - What separator to use to split the string. Default is " " (space)']}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"input-example-1",children:"Input example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<div>{{ "one two".split(" ") }}</div>\n'})}),"\n",(0,l.jsx)(n.h4,{id:"output-1",children:"Output"}),"\n",(0,l.jsxs)(n.p,{children:["The output will be ",(0,l.jsx)(n.code,{children:"one,two"})," because when you trying to print an array, it will be join values with comma. It only happens when you are trying to print the array. For example, ",(0,l.jsx)(n.code,{children:"{{ [1, 2, 3] }}"})," will be printed as ",(0,l.jsx)(n.code,{children:"1,2,3"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<div>one,two</div>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"trim",children:(0,l.jsx)(n.code,{children:"trim()"})}),"\n",(0,l.jsx)(n.p,{children:"Trims a string from spaces and special characters like tabs, spaces and new lines by default. You can pass a argument to trim a specific set of characters from a string"}),"\n",(0,l.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"chars"})," (optional) - A string of characters to trim from a string. Default is ",(0,l.jsx)(n.code,{children:"\\t \\n\\r"})]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"input-example-2",children:"Input example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<span>{{ " Anna ".trim() }}</span>\n'})}),"\n",(0,l.jsx)(n.h4,{id:"output-2",children:"Output"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<span>Anna</span>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"len",children:(0,l.jsx)(n.code,{children:"len()"})}),"\n",(0,l.jsx)(n.p,{children:"Returns the length of the string"}),"\n",(0,l.jsx)(n.h4,{id:"input-example-3",children:"Input example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<b>{{ "Hello, World!".len() }}</b>\n'})}),"\n",(0,l.jsx)(n.h4,{id:"output-3",children:"Output"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<b>13</b>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"lower",children:(0,l.jsx)(n.code,{children:"lower()"})}),"\n",(0,l.jsx)(n.p,{children:"Converts a string to lowercase"}),"\n",(0,l.jsx)(n.h4,{id:"input-example-4",children:"Input example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<span>{{ "Hello, World!".lower() }}<span>\n'})}),"\n",(0,l.jsx)(n.h4,{id:"output-4",children:"Output"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<span>hello, world!</span>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"upper",children:(0,l.jsx)(n.code,{children:"upper()"})}),"\n",(0,l.jsx)(n.p,{children:"Converts a string to uppercase"}),"\n",(0,l.jsx)(n.h4,{id:"input-example-5",children:"Input example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<b>{{ "Hello, World!".upper() }}</b>\n'})}),"\n",(0,l.jsx)(n.h4,{id:"output-5",children:"Output"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<b>HELLO, WORLD!</b>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var l=t(6540);const i={},s=l.createContext(i);function r(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);