"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1127],{4374:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>a});var i=n(4848),r=n(8453);const l={sidebar_position:3},o="Expressions",t={id:"language-elements/expressions",title:"Expressions",description:"- Expressions",source:"@site/versioned_docs/version-v1/language-elements/expressions.md",sourceDirName:"language-elements",slug:"/language-elements/expressions",permalink:"/docs/v1/language-elements/expressions",draft:!1,unlisted:!1,tags:[],version:"v1",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Statements",permalink:"/docs/v1/language-elements/statements"},next:{title:"Literals",permalink:"/docs/v1/language-elements/literals"}},c={},a=[{value:"Ternary expressions",id:"ternary-expressions",level:2},{value:"Prefix expressions",id:"prefix-expressions",level:2},{value:"Infix expressions",id:"infix-expressions",level:2},{value:"Postfix expressions",id:"postfix-expressions",level:2},{value:"Comparison expressions",id:"comparison-expressions",level:2},{value:"Supported operators",id:"supported-operators",level:3},{value:"Function calls",id:"function-calls",level:2}];function x(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"expressions",children:"Expressions"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Expressions","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#ternary-expressions",children:"Ternary expressions"})," ",(0,i.jsx)(s.code,{children:"{{ x ? y : z }}"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#prefix-expressions",children:"Prefix expressions"})," ",(0,i.jsx)(s.code,{children:"{{ !x"})," or ",(0,i.jsx)(s.code,{children:"-x }}"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#infix-expressions",children:"Infix expressions"})," ",(0,i.jsx)(s.code,{children:"{{ x * (y + 3) }}"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#postfix-expressions",children:"Postfix expressions"})," ",(0,i.jsx)(s.code,{children:"{{ x++ }}"})," or ",(0,i.jsx)(s.code,{children:"{{ x-- }}"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#comparison-expressions",children:"Comparison expressions"})," ",(0,i.jsx)(s.code,{children:"{{ x == y }}"})," or ",(0,i.jsx)(s.code,{children:"{{ x < y }}"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#function-calls",children:"Function calls"})," ",(0,i.jsx)(s.code,{children:'{{ name.split(" ") }}'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"ternary-expressions",children:"Ternary expressions"}),"\n",(0,i.jsx)(s.p,{children:"You can use ternary expressions to conditionally render content. Here is an example of using ternary expressions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:'<span>{{ x == 1 ? "yes" : "no" }}</span>\n'})}),"\n",(0,i.jsx)(s.p,{children:'The advantage of a "ternary expression" over "if statement" is that it can be use inside of any other expressions.'}),"\n",(0,i.jsx)(s.h2,{id:"prefix-expressions",children:"Prefix expressions"}),"\n",(0,i.jsx)(s.p,{children:"You can use prefix expressions to negate or invert a boolean value. Here is an example of using prefix expressions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:'<span>{{ !isTall ? "Not tall" : "Is tall" }}</span>\n<span>{{ -x }}</span>\n'})}),"\n",(0,i.jsx)(s.h2,{id:"infix-expressions",children:"Infix expressions"}),"\n",(0,i.jsx)(s.p,{children:"You can use infix expressions to perform arithmetic operations. Here is an example of using infix expressions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:"<ul>\n    <li>{{ x + y }}</li> \x3c!-- Addition --\x3e\n    <li>{{ x - y }}</li> \x3c!-- Subtraction --\x3e\n    <li>{{ x * y }}</li> \x3c!-- Multiplication --\x3e\n    <li>{{ x / y }}</li> \x3c!-- Division --\x3e\n    <li>{{ x % y }}</li> \x3c!-- Modulo --\x3e\n    <li>{{ (x + 2) / (y * (4 - c)) }}</li> \x3c!-- Grouped expressions --\x3e\n</ul>\n"})}),"\n",(0,i.jsx)(s.h2,{id:"postfix-expressions",children:"Postfix expressions"}),"\n",(0,i.jsx)(s.p,{children:"You can use postfix expressions to increment or decrement a variable. Here is an example of using postfix expressions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:"<span>{{ x++ }}</span> \x3c!-- Increment --\x3e\n<span>{{ x-- }}</span> \x3c!-- Decrement --\x3e\n"})}),"\n",(0,i.jsx)(s.h2,{id:"comparison-expressions",children:"Comparison expressions"}),"\n",(0,i.jsx)(s.p,{children:"Comparison expressions produce a boolean value. Here is an example of using comparison expressions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:"@if(x == 1)\n    <p>x is 1</p>\n@end\n"})}),"\n",(0,i.jsx)(s.h3,{id:"supported-operators",children:"Supported operators"}),"\n",(0,i.jsx)(s.p,{children:"All supported operators are listed in the table below:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Operator"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"=="})}),(0,i.jsx)(s.td,{children:"Equal"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"!="})}),(0,i.jsx)(s.td,{children:"Not equal"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:">"})}),(0,i.jsx)(s.td,{children:"Greater"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"<"})}),(0,i.jsx)(s.td,{children:"Less"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:">="})}),(0,i.jsx)(s.td,{children:"Greater or equal"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"<="})}),(0,i.jsx)(s.td,{children:"Less or equal"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"function-calls",children:"Function calls"}),"\n",(0,i.jsx)(s.p,{children:"You can use function calls to call functions. Textwire has a few built-in functions that you can use in your templates."}),"\n",(0,i.jsxs)(s.p,{children:["Functions in Textwire are type specific, which means that you can't call a function on a variable that is not of the same type as the function. For example, you can't call a ",(0,i.jsx)(s.code,{children:"split"})," function on an integer variable."]}),"\n",(0,i.jsx)(s.p,{children:"Here is an example of using function calls:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:'{{ name.split(" ") }}\n'})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["You can read more detailed about built-in functions on the ",(0,i.jsx)(s.a,{href:"/docs/v1/functions/",children:"Built-in Functions"})," page."]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>t});var i=n(6540);const r={},l=i.createContext(r);function o(e){const s=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:s},e.children)}}}]);