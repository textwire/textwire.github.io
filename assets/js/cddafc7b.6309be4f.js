"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[733],{1393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"get-started/eval-string","title":"Evaluate a String - v1","description":"You can use the EvaluateString function to compile and evaluate a string containing Textwire code. The EvaluateString function accepts a string and a map of variables that you want to inject into the string. After evaluating the string, the function returns the evaluated string.","source":"@site/versioned_docs/version-v1/get-started/eval-string.md","sourceDirName":"get-started","slug":"/get-started/eval-string","permalink":"/docs/v1/get-started/eval-string","draft":false,"unlisted":false,"tags":[],"version":"v1","sidebarPosition":3,"frontMatter":{"title":"Evaluate a String - v1","sidebar_label":"Evaluate a String","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Usage with Templates","permalink":"/docs/v1/get-started/template-usage"},"next":{"title":"Evaluate a File","permalink":"/docs/v1/get-started/eval-file"}}');var i=n(4848),r=n(8453);const s={title:"Evaluate a String - v1",sidebar_label:"Evaluate a String",sidebar_position:3},o="Evaluate a String",l={},c=[];function u(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"evaluate-a-string",children:"Evaluate a String"})}),"\n",(0,i.jsxs)(t.p,{children:["You can use the ",(0,i.jsx)(t.code,{children:"EvaluateString"})," function to compile and evaluate a string containing Textwire code. The ",(0,i.jsx)(t.code,{children:"EvaluateString"})," function accepts a string and a map of variables that you want to inject into the string. After evaluating the string, the function returns the evaluated string."]}),"\n",(0,i.jsx)(t.p,{children:"This is useful when you want to inject variables into an email template or any other string that contains Textwire code. Here is an example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'inp := `Hello <b>{{ name }}</b>! Congratulations on your {{ age }}th birthday!`\n\nresult, err := textwire.EvaluateString(inp, map[string]interface{}{\n    "name": "Serhii",\n    "age": 33\n})\n\nif err != nil {\n    log.Fatal(err)\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);