"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8653],{5554:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"v1","label":"v1","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-v1","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Usage with Templates","href":"/docs/v1/get-started/template-usage","docId":"get-started/template-usage","unlisted":false},{"type":"link","label":"Evaluate a String","href":"/docs/v1/get-started/eval-string","docId":"get-started/eval-string","unlisted":false},{"type":"link","label":"Evaluate a File","href":"/docs/v1/get-started/eval-file","docId":"get-started/eval-file","unlisted":false}],"href":"/docs/v1/get-started/"},{"type":"category","label":"Built-in Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"String Functions","href":"/docs/v1/functions/str","docId":"functions/str","unlisted":false},{"type":"link","label":"Array functions","href":"/docs/v1/functions/arr","docId":"functions/arr","unlisted":false},{"type":"link","label":"Integer Functions","href":"/docs/v1/functions/int","docId":"functions/int","unlisted":false},{"type":"link","label":"Float functions","href":"/docs/v1/functions/float","docId":"functions/float","unlisted":false}],"href":"/docs/v1/functions/"},{"type":"category","label":"Language Elements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Statements","href":"/docs/v1/language-elements/statements","docId":"language-elements/statements","unlisted":false},{"type":"link","label":"Expressions","href":"/docs/v1/language-elements/expressions","docId":"language-elements/expressions","unlisted":false},{"type":"link","label":"Literals","href":"/docs/v1/language-elements/literals","docId":"language-elements/literals","unlisted":false},{"type":"link","label":"Other Information","href":"/docs/v1/language-elements/other","docId":"language-elements/other","unlisted":false}],"href":"/docs/v1/language-elements/"},{"type":"link","label":"FAQ","href":"/docs/v1/faq","docId":"faq","unlisted":false}]},"docs":{"faq":{"id":"faq","title":"FAQ - v1","description":"Frequently asked questions about Textwire","sidebar":"tutorialSidebar"},"functions/arr":{"id":"functions/arr","title":"Array functions - v1","description":"len","sidebar":"tutorialSidebar"},"functions/float":{"id":"functions/float","title":"Float functions - v1","description":"int()","sidebar":"tutorialSidebar"},"functions/functions":{"id":"functions/functions","title":"Built-in Functions - v1","description":"Textwire has a set of built-in functions that can be used to manipulate data. These functions are used to perform operations on strings, arrays, integers, and floats. You can use these functions anywhere in your Textwire programs.","sidebar":"tutorialSidebar"},"functions/int":{"id":"functions/int","title":"Integer Functions - v1","description":"float()","sidebar":"tutorialSidebar"},"functions/str":{"id":"functions/str","title":"String Functions - v1","description":"raw()","sidebar":"tutorialSidebar"},"get-started/eval-file":{"id":"get-started/eval-file","title":"Evaluate a File - v1","description":"Evaluating a file can be done with the EvaluateFile function. The EvaluateFile function accepts a path to the file that contains Textwire code and a map of variables that you want to inject into the file. Here is an example:","sidebar":"tutorialSidebar"},"get-started/eval-string":{"id":"get-started/eval-string","title":"Evaluate a String - v1","description":"You can use the EvaluateString function to compile and evaluate a string containing Textwire code. The EvaluateString function accepts a string and a map of variables that you want to inject into the string. After evaluating the string, the function returns the evaluated string.","sidebar":"tutorialSidebar"},"get-started/get-started":{"id":"get-started/get-started","title":"Getting Started - v1","description":"Welcome to Textwire, a powerful template evaluate designed for Go developers. Textwire provides a seamless way to inject variables into your HTML files, making it easier to create dynamic and data-driven content. This guide will walk you through the essential steps to get started with Textwire in your Go projects.","sidebar":"tutorialSidebar"},"get-started/template-usage":{"id":"get-started/template-usage","title":"Usage with Templates - v1","description":"Template Configuration","sidebar":"tutorialSidebar"},"language-elements/expressions":{"id":"language-elements/expressions","title":"Expressions - v1","description":"- Expressions","sidebar":"tutorialSidebar"},"language-elements/language-elements":{"id":"language-elements/language-elements","title":"Language Elements - v1","description":"Textwire is designed to be easy to use for Go developers. It has a similar syntax to Go, but it is a separate language and has specific grammar to make it easier to use as a template language.","sidebar":"tutorialSidebar"},"language-elements/literals":{"id":"language-elements/literals","title":"Literals - v1","description":"- Literals","sidebar":"tutorialSidebar"},"language-elements/other":{"id":"language-elements/other","title":"Other Information - v1","description":"- Other","sidebar":"tutorialSidebar"},"language-elements/statements":{"id":"language-elements/statements","title":"Statements - v1","description":"- Statements","sidebar":"tutorialSidebar"}}}}')}}]);