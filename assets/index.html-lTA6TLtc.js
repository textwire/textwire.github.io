import{_ as n,o as a,c as s,b as t}from"./app-kniREE-O.js";const e={},o=t(`<h1 id="guide" tabindex="-1"><a class="header-anchor" href="#guide" aria-hidden="true">#</a> Guide</h1><blockquote><p>‚ö†Ô∏è WARNING: Textwire is still in development and is not ready for production use. If you are interested in this project, please star it to show your support and it will help me to prioritize the development of this project. Thanks in advance! ‚ù§Ô∏è</p></blockquote><p>Textwire is a simple yet powerful templating language for Go. It is designed to easily inject variables from Go code into a template file or just a regular string. It is inspired by Go&#39;s syntax and has a similar syntax to make it easier for Go developers to learn and use it.</p><p>Keep in mind that this is a separate language and has nothing to do with Go. It just has a similar syntax to make it easier for Go developer to learn and use it. As for example, you can&#39;t write <code>{{ true ? &quot;yes&quot; : &quot;no&quot; }}</code> in Go, but you can do it in Textwire.</p><h2 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started" aria-hidden="true">#</a> Get started</h2><p>Before we start using Textwire as a templating language, we need to tell it where to look for the template files. We can do that by using the <code>textwire.SetConfig</code> function only once in our <code>main.go</code> file. Here is an example of setting the configurations:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    textwire<span class="token punctuation">.</span><span class="token function">SetConfig</span><span class="token punctuation">(</span>textwire<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
        TemplateDir<span class="token punctuation">:</span> <span class="token string">&quot;src/views/templates&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With this configuration in place, Textwire will scan the content of the <code>src/views/templates</code> folder and all of its subfolders for template files. It will then cache them so that it doesn&#39;t scan the folder every time you want to parse a file.</p><p>To print the content of the template file, we can use the <code>textwire.ParseFile</code> function. Here is an example of parsing a template file:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> homeView<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Listening on http://localhost:8080&quot;</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">homeView</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vars <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>   <span class="token number">23</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	err <span class="token operator">:=</span> textwire<span class="token punctuation">.</span><span class="token function">PrintFile</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> vars<span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, for our home page, we tell Textwire to use the &quot;home.textwire.html&quot; file and pass the variables that we want to inject into the template. The <code>textwire.PrintFile</code> function will then parse the file and print the result to the <code>http.ResponseWriter</code> object.</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><ul><li>üîç You can use package to parse a string with embedded Textwire code</li><li>üìÉ You can use package as a templating language for your application</li><li>üß© Language syntax is similar to Go&#39;s syntax</li><li>üñºÔ∏è You can define layouts and insert content into them</li><li>üõ£Ô∏è You can define aliases for specific paths</li><li>‚ùì You can use &quot;ternary expressions&quot; and &quot;if statements&quot; to conditionally render content</li><li>‚úÖ Textwire is fully tested</li><li>üö¶ Proper error handling</li></ul><h2 id="parse-a-string" tabindex="-1"><a class="header-anchor" href="#parse-a-string" aria-hidden="true">#</a> Parse a string</h2><p>One way of using Textwire is to use it to parse a string with embedded variables. It is useful for rendering emails or other text-based content that you want to inject variables into.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/textwire/textwire&quot;</span>

str <span class="token operator">:=</span> <span class="token string">\`
    Hello {{ name }}! Thank you for your order #{{ orderNumber }}.
    As a gift, we give you a {{ discount }} discount on your next order.
\`</span>

vars <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;orderNumber&quot;</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token string">&quot;discount&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;10%&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

parsed<span class="token punctuation">,</span> err <span class="token operator">:=</span> textwire<span class="token punctuation">.</span><span class="token function">ParseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> vars<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Variable <strong>&quot;parsed&quot;</strong> will now contain the parsed string with the injected variables. If there is an error, the <strong>&quot;err&quot;</strong> variable will contain the error.</p><h2 id="usage-with-templates" tabindex="-1"><a class="header-anchor" href="#usage-with-templates" aria-hidden="true">#</a> Usage with templates</h2><p>You can use Textwire as a template language for your Server Side Rendered (SSR) web applications. Let&#39;s take a look what features you can use to build your templates.</p><h3 id="layouts" tabindex="-1"><a class="header-anchor" href="#layouts" aria-hidden="true">#</a> Layouts</h3><p>Defining a layout in Textwire is very simple. You need to create a file anywhere inside of your template files. Many developers just create a <code>layouts</code> directory for different layouts because you might have a main layout, one for admin panel, one for user cabinet and so on. All textwire files should end with <code>*.textwire.html</code> file extension.</p><p>This is what a layout file might look like:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ locale }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{{ reserve &quot;title&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    {{ reserve &quot;content&quot; }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reserve-space" tabindex="-1"><a class="header-anchor" href="#reserve-space" aria-hidden="true">#</a> Reserve space</h3><p>The &quot;reserve&quot; keyword is used to reserve a place for dynamic content that you can insert later. For example, you can reserve a place for the title of the page and then insert it later. Here is an example of inserting a title and content:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ layout &quot;layouts/main&quot; }}

{{ insert &quot;title&quot;, &quot;Home page&quot; }}

{{ insert &quot;content&quot; }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a home page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, we use the layout &quot;layouts/main&quot; so that parser knows which layout to use. Then we insert the title and content into reserved places. The first argument is the name of the reserved place and the second argument is the value that we want to insert.</p><p>As you can see there are two ways we can define the content. We can either use the <code>{{ insert &quot;content&quot; }}</code> and <code>{{ end }}</code> keywords and define content between them, or we can use the <code>{{ insert &quot;title&quot;, &quot;Home page&quot; }}</code> and pass content as the second argument. The first way is useful when you want to insert a lot of content and the second way is useful when you want to insert a single line of content.</p><h3 id="using-layout" tabindex="-1"><a class="header-anchor" href="#using-layout" aria-hidden="true">#</a> Using layout</h3><p>The &quot;layout&quot; keyword is used to specify which layout to use. Assuming that our layout is placed in the &quot;layouts&quot; folder and called &quot;main.textwire.html&quot;, we can use it like this:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ layout &quot;layouts/main&quot; }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&quot;layouts/main&quot;</code> is the relative path to the layout file. If you have deeply nested files and don&#39;t want to always specify the relative path, you can use the set the <a href="#define-aliases">aliases</a>.</p><h3 id="inserting-content" tabindex="-1"><a class="header-anchor" href="#inserting-content" aria-hidden="true">#</a> Inserting content</h3><p>The &quot;insert&quot; keywords is used to insert the content into the reserved place in layout file. Here is an example of inserting the content into layout:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ layout &quot;layouts/main&quot; }}

{{ insert &quot;content&quot; }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="define-aliases" tabindex="-1"><a class="header-anchor" href="#define-aliases" aria-hidden="true">#</a> Define aliases</h2><p>You can define aliases for specific paths so that you don&#39;t have to always specify the relative path to the layout file. For example, if you have a layout file in the &quot;src/views/templates/layouts&quot; folder, you can set an alias for it like this:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>textwire<span class="token punctuation">.</span><span class="token function">SetAliases</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;@layouts&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;src/views/templates/layouts&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After setting the alias, you can use it like this:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ layout &quot;@layouts/main&quot; }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you&#39;ve used aliases on the frontend with Webpack, you will find this feature very familiar and useful.</p>`,41),i=[o];function p(l,u){return a(),s("div",null,i)}const r=n(e,[["render",p],["__file","index.html.vue"]]);export{r as default};
