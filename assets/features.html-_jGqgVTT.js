import{_ as a,o as s,c as n,b as e}from"./app-e_TKxnOQ.js";const t={},l=e(`<h1 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h1><p>Textwire is designed to be easy to use for Go developers. It has a similar syntax to Go, but it is a separate language and has specific grammar to make it easier to use as a template language.</p><p>Textwire code can only be defined inside of the <code>{{ }}</code> brackets. If you want to write a regular HTML code, you can do it outside of the brackets. Code inside brackets is a single expression and can&#39;t be split into multiple lines.</p><p>❌ Incorrect expression</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ x := 5; y := 10 }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>✅ Correct expression</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ x := 5 }}
{{ y := 10 }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>All the bracket statements return either an empty string or a string. For example, <code>{{ x := 5 }}</code> will return an empty string, but <code>{{ 5 + 5 }}</code> will return &quot;10&quot;.</p><p>There are special bracket statements that need to be closed with <code>{{ end }}</code> keyword. For example, <a href="#if-statements">if statements</a> and <a href="#for-statements">for statements</a>.</p><p>Let&#39;s take a look at what features are available (✅) in Textwire and what features are still in development (🚧).</p><ul><li>Statements <ul><li>✅ <a href="#if-statements">If statements</a> <code>{{ if x == 1 }}</code></li><li>🚧 <a href="#for-statements">For statements</a> <code>{{ for i, name := range names }}</code></li><li>🚧 <a href="#variable-declaration">Variable declaration</a> <code>{{ x := 5 }}</code></li></ul></li><li>Expressions <ul><li>✅ <a href="#ternary-expressions">Ternary expressions</a> <code>{{ x ? y : z }}</code></li><li>✅ <a href="#prefix-expressions">Prefix expressions</a> <code>{{ !x</code> or <code>-x }}</code></li><li>✅ <a href="#infix-expressions">Infix expressions</a> <code>{{ x * (y + 3) }}</code></li></ul></li><li>Literals <ul><li>✅ <a href="#string-literals">String literals</a> <code>{{ &quot;Hello, World!&quot; }}</code></li><li>✅ <a href="#integer-literals">Integer literals</a> <code>{{ 123 }}</code> or <code>{{ -234 }}</code></li><li>✅ <a href="#float-literals">Float literals</a> <code>{{ 123.456 }}</code></li><li>✅ <a href="#boolean-literals">Boolean literals</a> <code>{{ true }}</code></li><li>✅ <a href="#nil-literal">Nil literal</a> <code>{{ nil }}</code></li><li>🚧 <a href="#slice-literals">Slice literals</a> <code>{{ []int{1, 2, 3} }}</code></li></ul></li></ul><h2 id="statements" tabindex="-1"><a class="header-anchor" href="#statements" aria-hidden="true">#</a> Statements</h2><h3 id="if-statements" tabindex="-1"><a class="header-anchor" href="#if-statements" aria-hidden="true">#</a> If statements</h3><p>You can use if statements to conditionally render content. Here is an example of using if statements:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if x == 1 }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is equal to 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ else if x == 2 }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is equal to 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ else }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is not equal to 1 or 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-statements" tabindex="-1"><a class="header-anchor" href="#for-statements" aria-hidden="true">#</a> For statements</h3><p>You can use for statements to iterate over slices. Here is an example of using for statements:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ for i, name := range names }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ i }}. {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="variable-declaration" tabindex="-1"><a class="header-anchor" href="#variable-declaration" aria-hidden="true">#</a> Variable declaration</h3><p>You can declare variables in 2 ways, either by using the <code>:=</code> operator or by using the <code>var</code> keyword. Here is an example of declaring variables:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ x := 5 }}
{{ var y = 10 }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions" aria-hidden="true">#</a> Expressions</h2><h3 id="ternary-expressions" tabindex="-1"><a class="header-anchor" href="#ternary-expressions" aria-hidden="true">#</a> Ternary expressions</h3><p>You can use ternary expressions to conditionally render content. Here is an example of using ternary expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x == 1 ? &quot;yes&quot; : &quot;no&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="prefix-expressions" tabindex="-1"><a class="header-anchor" href="#prefix-expressions" aria-hidden="true">#</a> Prefix expressions</h3><p>You can use prefix expressions to negate or invert a boolean value. Here is an example of using prefix expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ !isTall ? &quot;Not tall&quot; : &quot;Is tall&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ -x }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="infix-expressions" tabindex="-1"><a class="header-anchor" href="#infix-expressions" aria-hidden="true">#</a> Infix expressions</h3><p>You can use infix expressions to perform arithmetic operations. Here is an example of using infix expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x + y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Addition --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x - y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Subtraction --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x * y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Multiplication --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x / y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Division --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x % y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Modulo --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ (x + 2) / (y * (4 - c)) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Grouped expressions --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="literals" tabindex="-1"><a class="header-anchor" href="#literals" aria-hidden="true">#</a> Literals</h2><h3 id="string-literals" tabindex="-1"><a class="header-anchor" href="#string-literals" aria-hidden="true">#</a> String literals</h3><p>You can use string literals and concatenate them with other strings. Here is an example of using string literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ &quot;Hello&quot; + &quot;World!&quot; }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="integer-literals" tabindex="-1"><a class="header-anchor" href="#integer-literals" aria-hidden="true">#</a> Integer literals</h3><p>You can use integer literals and perform arithmetic operations with them. Here is an example of using integer literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ 1 + 2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="nil-literal" tabindex="-1"><a class="header-anchor" href="#nil-literal" aria-hidden="true">#</a> Nil literal</h3><p>You can use nil literal to check if a variable is nil. Here is an example of using nil literal:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if x == nil }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is nil<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="float-literals" tabindex="-1"><a class="header-anchor" href="#float-literals" aria-hidden="true">#</a> Float literals</h3><p>You can use float literals and perform arithmetic operations with them. Here is an example of using float literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ 1.5 + 2.5 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="boolean-literals" tabindex="-1"><a class="header-anchor" href="#boolean-literals" aria-hidden="true">#</a> Boolean literals</h3><p>You can use boolean literals to check if a variable is true or false. Here is an example of using boolean literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if isTall == true }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Is tall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slice-literals" tabindex="-1"><a class="header-anchor" href="#slice-literals" aria-hidden="true">#</a> Slice literals</h3><p>Defining a slice in Textwire is done is a similar way as in Go. Here is an example of defining a slice:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ names := []string{&quot;John&quot;, &quot;Jane&quot;, &quot;Jack&quot;} }}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    {{ for _, name := range names }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    {{ end }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),i=[l];function p(o,c){return s(),n("div",null,i)}const d=a(t,[["render",p],["__file","features.html.vue"]]);export{d as default};
