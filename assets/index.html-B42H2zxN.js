import{_ as t,r as l,o as i,c as o,a as e,d as a,e as p,w as c,b as s}from"./app-BB77lMcD.js";const r={},d=s(`<h1 id="language-elements" tabindex="-1"><a class="header-anchor" href="#language-elements"><span>Language Elements</span></a></h1><p>Textwire is designed to be easy to use for Go developers. It has a similar syntax to Go, but it is a separate language and has specific grammar to make it easier to use as a template language.</p><h2 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h2><p>Textwire has a simple syntax that is easy to learn. Here are some rules that you need to follow when writing Textwire code:</p><ul><li>All the HTML files that you want to parse with Textwire must have a <code>.tw.html</code> extension.</li><li>All the Textwire code must be inside of the <code>{{ }}</code> brackets, or start with <code>@</code> symbol.</li></ul><h3 id="bracket-statements" tabindex="-1"><a class="header-anchor" href="#bracket-statements"><span>Bracket statements</span></a></h3><p>Bracket statements are special Textwire statements that start with <code>{{</code> brackets and end with <code>}}</code>. They can be used to define variables, perform arithmetic operations, conditionally render content and so on. Bracket statements can be placed anywhere in the file except inside of directives.</p><ul><li>If you want multiple expressions inside <code>{{ }}</code> brackets, use <code>;</code> to separate them. For example: <code>{{ x = 5; y = 10 }}</code>.</li><li>All the bracket statements return a string. For example, <code>{{ x = 5 }}</code> will return an empty string, but <code>{{ 5 + 5 }}</code> will return &quot;10&quot;.</li><li>There are special bracket statements that need to be closed with <code>{{ end }}</code> keyword. For example, <a href="#if-statements">if statements</a> and <a href="#for-statements">for statements</a>.</li><li>To escape <code>{{ }}</code> brackets, you can use <code>\\</code>. For example <code>\\{{ x }}</code> will not be parsed as a bracket statement but as HTML.</li></ul><h3 id="directives" tabindex="-1"><a class="header-anchor" href="#directives"><span>Directives</span></a></h3><p>Directives are special Textwire statements that start with <code>@</code> symbol. They can be used to define a layout, insert content into reserved places, if statements and so on. Directives can be placed anywhere in the file except inside of <code>{{ }}</code> brackets.</p><ul><li>To escape directive symbols, you can use <code>\\</code>. For example <code>\\@if(x == 1)</code> will not be parsed as a directive but as HTML.</li><li>You can use textwire expressions and variables inside of directives. For example <code>@if(x == 1)</code> or <code>@use(layoutName)</code>.</li></ul><h2 id="available-features" tabindex="-1"><a class="header-anchor" href="#available-features"><span>Available features</span></a></h2><p>Let&#39;s take a look at what features are available in Textwire:</p><ul><li>Statements <ul><li><a href="#if-statements">If statements</a> <code>@if(x == 1)</code></li><li><a href="#variable-declaration">Variable declaration</a> <code>{{ x = 5 }}</code></li><li><a href="#use-statement">Use statement</a> <code>@use(&quot;layouts/main&quot;)</code></li><li><a href="#insert-statement">Insert statement</a> <code>@insert(&quot;title&quot;, &quot;Home&quot;)</code></li><li><a href="#reserve-statement">Reserve statement</a> <code>@reserve(&quot;title&quot;)</code></li><li><a href="#for-statements">For statements</a> <code>@for(i = 0; i &lt; 2; i++)</code></li><li><a href="#each-statements">Each statements</a> <code>@each(name in names)</code></li></ul></li><li>Expressions <ul><li><a href="#ternary-expressions">Ternary expressions</a> <code>{{ x ? y : z }}</code></li><li><a href="#prefix-expressions">Prefix expressions</a> <code>{{ !x</code> or <code>-x }}</code></li><li><a href="#infix-expressions">Infix expressions</a> <code>{{ x * (y + 3) }}</code></li><li><a href="#postfix-expressions">Postfix expressions</a> <code>{{ x++ }}</code> or <code>{{ x-- }}</code></li><li><a href="#comparison-expressions">Comparison expressions</a> <code>{{ x == y }}</code> or <code>{{ x &lt; y }}</code></li><li><a href="#function-calls">Function calls</a> <code>{{ name.split(&quot; &quot;) }}</code></li></ul></li><li>Literals <ul><li><a href="#string-literals">String literals</a> <code>{{ &quot;Hello, World!&quot; }}</code> or <code>{{ \`Hello, World!\` }}</code></li><li><a href="#integer-literals">Integer literals</a> <code>{{ 123 }}</code> or <code>{{ -234 }}</code></li><li><a href="#float-literals">Float literals</a> <code>{{ 123.456 }}</code></li><li><a href="#boolean-literals">Boolean literals</a> <code>{{ true }}</code></li><li><a href="#nil-literal">Nil literal</a> <code>{{ nil }}</code></li><li><a href="#array-literals">Array literals</a> <code>{{ [1, 2, 3] }}</code></li></ul></li></ul><h2 id="types-and-literals" tabindex="-1"><a class="header-anchor" href="#types-and-literals"><span>Types and Literals</span></a></h2><p>Textwire has a different type system that Go. When you pass a variable to Textwire, it will be automatically converted to a Textwire type. Here is a list of supported types that you can pass to Textwire or define in Textwire:</p><table><thead><tr><th>Textwire type</th><th>Equivalent Go types</th></tr></thead><tbody><tr><td><code>Str</code></td><td><code>string</code></td></tr><tr><td><code>Bool</code></td><td><code>bool</code></td></tr><tr><td><code>Int</code></td><td><code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code></td></tr><tr><td><code>Float</code></td><td><code>float32</code>, <code>float64</code></td></tr><tr><td><code>Nil</code></td><td><code>nil</code></td></tr><tr><td><code>Array</code></td><td><code>[]string</code>, <code>[]bool</code>, <code>[]int</code>, <code>[]int64</code>, <code>[]int32</code>, <code>[]int16</code>, <code>[]int8</code>, <code>[]uint</code>, <code>[]uint64</code>, <code>[]uint32</code>, <code>[]uint16</code>, <code>[]uint8</code>, <code>[]float64</code>, <code>[]float32</code></td></tr></tbody></table><p>The biggest difference in types and type literals between Textwire and Go is that Textwire&#39;s literals have functions that you can call on them. For example, you can call a <code>split</code> function on a string literal like this: <code>{{ &quot;hello world&quot;.split(&quot; &quot;) }}</code> to get an array of strings <code>[&quot;hello&quot;, &quot;world&quot;]</code>.</p><h2 id="statements" tabindex="-1"><a class="header-anchor" href="#statements"><span>Statements</span></a></h2><h3 id="if-statements" tabindex="-1"><a class="header-anchor" href="#if-statements"><span>If statements</span></a></h3><p>You can use if statements to conditionally render content. Here is an example of using if statements:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@if(name == &quot;Anna&quot;)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Her name is Anna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use <code>else</code> and <code>elseif</code> statements:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@if(x == 1)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@elseif(x == 2)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@else
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is not 1 and 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-statements" tabindex="-1"><a class="header-anchor" href="#for-statements"><span>For statements</span></a></h3><p>You can use regular for loops to iterate over an array or a range of numbers.</p><p>This is a basic for loop that you can use. It has a declaration, condition and post statement. <code>for &lt;declaration&gt;; &lt;condition&gt;; &lt;post&gt;</code>. They are all optional. Here is an example of using for loop:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ names = [&quot;Ann&quot;, &quot;Serhii&quot;] }}

@for(i = 0; i &lt; names.len(); i++)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ names[i] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="each-statements" tabindex="-1"><a class="header-anchor" href="#each-statements"><span>Each statements</span></a></h3><p>Each statement is a special for loop that you can use to iterate over an array. It has a declaration and an array. <code>@each(&lt;declaration&gt; in &lt;array&gt;)</code>. Here is an example of using each loop:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ names = [&quot;Ann&quot;, &quot;Serhii&quot;] }}

@each(name in names)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="variable-declaration" tabindex="-1"><a class="header-anchor" href="#variable-declaration"><span>Variable declaration</span></a></h3><p>You can assign and declare variables by using the <code>=</code> operator. Here is an example of declaring variables:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ x = 5 }}
{{ x = 10 }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You cannot assign values to variables that have a different type. For example, you cannot do <code>{{ x = &quot;Hello&quot;; x = 3 }}</code> because <code>x</code> is a string and then you are trying to assign an integer to it. In Textwire, you don&#39;t need to declare type of a variable, it will be automatically inferred from the value that you assign to it.</p><blockquote><p>Variable declaration statements are not expressions! They don&#39;t return any value and can&#39;t be used inside of other expressions.</p></blockquote><h3 id="use-statement" tabindex="-1"><a class="header-anchor" href="#use-statement"><span>Use statement</span></a></h3><p>You have a &quot;use statement&quot; to define a layout for your template. Here is an example of using use statement:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@use(&quot;layouts/main&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Use statement excepts a string literal as an argument. The string literal should be a path to the layout file relative to a <code>TemplateDir</code> parameter that you set in the config. For example, if you set <code>TemplateDir</code> to <code>&quot;src/templates/layouts&quot;</code>, then you can use the layout statement like <code>@use(&quot;main&quot;)</code> and it will look for the layout file in <code>&quot;src/templates/layouts/main.tw.html&quot;</code>.</p><h3 id="insert-statement" tabindex="-1"><a class="header-anchor" href="#insert-statement"><span>Insert statement</span></a></h3><p>You can use insert statement to insert content into reserved places. You cannot use <code>insert</code> without defining a layout with Use statement in the same file. Here is an example of using insert statement:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@use(&quot;layouts/main&quot;)

@insert(&quot;title&quot;, &quot;Home page&quot;)

@insert(&quot;content&quot;)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a home page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Insert statement excepts 2 arguments, the name of the reserved place and the optional content that you want to insert into the reserved place.</p><p>All the <code>insert</code> statements will be transferred to the layout file and will be placed into reserved places defined by a <a href="#reserve-statement">reserve statement</a>.</p><h3 id="reserve-statement" tabindex="-1"><a class="header-anchor" href="#reserve-statement"><span>Reserve statement</span></a></h3><p>When you define a layout file for you template, you need to reserve places for dynamic content. You can reserve a place for a title, content, sidebar, footer and so on. Here is an example of using reserve statement:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ locale }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>@reserve(&quot;title&quot;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    @reserve(&quot;content&quot;)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reserve statement excepts only a single argument, which the name of the reserved place. This name will be used in the <a href="#insert-statement">insert statement</a> to insert content into the reserved place.</p><h2 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions"><span>Expressions</span></a></h2><h3 id="ternary-expressions" tabindex="-1"><a class="header-anchor" href="#ternary-expressions"><span>Ternary expressions</span></a></h3><p>You can use ternary expressions to conditionally render content. Here is an example of using ternary expressions:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x == 1 ? &quot;yes&quot; : &quot;no&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The advantage of a &quot;ternary expression&quot; over &quot;if statement&quot; is that it can be use inside of any other expressions.</p><h3 id="prefix-expressions" tabindex="-1"><a class="header-anchor" href="#prefix-expressions"><span>Prefix expressions</span></a></h3><p>You can use prefix expressions to negate or invert a boolean value. Here is an example of using prefix expressions:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ !isTall ? &quot;Not tall&quot; : &quot;Is tall&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ -x }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="infix-expressions" tabindex="-1"><a class="header-anchor" href="#infix-expressions"><span>Infix expressions</span></a></h3><p>You can use infix expressions to perform arithmetic operations. Here is an example of using infix expressions:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x + y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Addition --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x - y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Subtraction --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x * y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Multiplication --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x / y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Division --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x % y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Modulo --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ (x + 2) / (y * (4 - c)) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Grouped expressions --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postfix-expressions" tabindex="-1"><a class="header-anchor" href="#postfix-expressions"><span>Postfix expressions</span></a></h3><p>You can use postfix expressions to increment or decrement a variable. Here is an example of using postfix expressions:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x++ }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Increment --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x-- }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Decrement --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comparison-expressions" tabindex="-1"><a class="header-anchor" href="#comparison-expressions"><span>Comparison expressions</span></a></h3><p>Comparison expressions produce a boolean value. Here is an example of using comparison expressions:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@if(x == 1)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="supported-operators" tabindex="-1"><a class="header-anchor" href="#supported-operators"><span>Supported operators</span></a></h4><p>All supported operators are listed in the table below:</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>==</code></td><td>Equal</td></tr><tr><td><code>!=</code></td><td>Not equal</td></tr><tr><td><code>&gt;</code></td><td>Greater</td></tr><tr><td><code>&lt;</code></td><td>Less</td></tr><tr><td><code>&gt;=</code></td><td>Greater or equal</td></tr><tr><td><code>&lt;=</code></td><td>Less or equal</td></tr></tbody></table><h3 id="function-calls" tabindex="-1"><a class="header-anchor" href="#function-calls"><span>Function calls</span></a></h3><p>You can use function calls to call functions. Textwire has a few built-in functions that you can use in your templates.</p><p>Functions in Textwire are type specific, which means that you can&#39;t call a function on a variable that is not of the same type as the function. For example, you can&#39;t call a <code>split</code> function on an integer variable.</p><p>Here is an example of using function calls:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ name.split(&quot; &quot;) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,74),u=s(`<h2 id="literals" tabindex="-1"><a class="header-anchor" href="#literals"><span>Literals</span></a></h2><h3 id="string-literals" tabindex="-1"><a class="header-anchor" href="#string-literals"><span>String literals</span></a></h3><p>You can use string literals and concatenate them with other strings. You can use double or single quotes for strings. Here is an example of using string literals:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ &quot;Hello&quot; + &#39;World!&#39; }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>When you print a string, it will be automatically escaped. If you want to print a string without escaping it, you can use the a <code>raw</code> function on strings. Example: <code>{{ &quot;&lt;h1&gt;Test&lt;/h1&gt;&quot;.raw() }}</code></p></blockquote><h3 id="integer-literals" tabindex="-1"><a class="header-anchor" href="#integer-literals"><span>Integer literals</span></a></h3><p>You can use integer literals and perform arithmetic operations with them. Here is an example of using integer literals:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ 1 + 2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="nil-literal" tabindex="-1"><a class="header-anchor" href="#nil-literal"><span>Nil literal</span></a></h3><p>You can use nil literal to check if a variable is nil. Here is an example of using nil literal:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@if(nil)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>It will not be displayed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="float-literals" tabindex="-1"><a class="header-anchor" href="#float-literals"><span>Float literals</span></a></h3><p>You can use float literals and perform arithmetic operations with them. Here is an example of using float literals:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ 1.5 + 2.5 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="boolean-literals" tabindex="-1"><a class="header-anchor" href="#boolean-literals"><span>Boolean literals</span></a></h3><p>You can use boolean literals to check if a variable is true or false. Here is an example of using boolean literals:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@if(true)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Is tall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-literals" tabindex="-1"><a class="header-anchor" href="#array-literals"><span>Array literals</span></a></h3><p>Defining an array in Textwire is done is a similar way as in other languages. Here is an example of defining an array:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ names = [&quot;John&quot;, &quot;Jane&quot;, &quot;Jack&quot;] }}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    @each(name in names)
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ loop.index }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Index of the current item --&gt;</span>
    @end
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can access values in an array by using an index. Here is an example of accessing values in an array:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{ names = [&quot;John&quot;, &quot;Jane&quot;, &quot;Jack&quot;] }}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ names[0] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- &quot;John&quot; --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ names[1] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- &quot;Jane&quot; --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ names[2] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- &quot;Jack&quot; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function m(h,g){const n=l("RouteLink");return i(),o("div",null,[d,e("blockquote",null,[e("p",null,[a("You can read more detailed about built-in functions on the "),p(n,{to:"/1.x/functions/"},{default:c(()=>[a("Built-in Functions")]),_:1}),a(" page.")])]),u])}const v=t(r,[["render",m],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/1.x/language-elements/","title":"Language Elements","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Syntax","slug":"syntax","link":"#syntax","children":[{"level":3,"title":"Bracket statements","slug":"bracket-statements","link":"#bracket-statements","children":[]},{"level":3,"title":"Directives","slug":"directives","link":"#directives","children":[]}]},{"level":2,"title":"Available features","slug":"available-features","link":"#available-features","children":[]},{"level":2,"title":"Types and Literals","slug":"types-and-literals","link":"#types-and-literals","children":[]},{"level":2,"title":"Statements","slug":"statements","link":"#statements","children":[{"level":3,"title":"If statements","slug":"if-statements","link":"#if-statements","children":[]},{"level":3,"title":"For statements","slug":"for-statements","link":"#for-statements","children":[]},{"level":3,"title":"Each statements","slug":"each-statements","link":"#each-statements","children":[]},{"level":3,"title":"Variable declaration","slug":"variable-declaration","link":"#variable-declaration","children":[]},{"level":3,"title":"Use statement","slug":"use-statement","link":"#use-statement","children":[]},{"level":3,"title":"Insert statement","slug":"insert-statement","link":"#insert-statement","children":[]},{"level":3,"title":"Reserve statement","slug":"reserve-statement","link":"#reserve-statement","children":[]}]},{"level":2,"title":"Expressions","slug":"expressions","link":"#expressions","children":[{"level":3,"title":"Ternary expressions","slug":"ternary-expressions","link":"#ternary-expressions","children":[]},{"level":3,"title":"Prefix expressions","slug":"prefix-expressions","link":"#prefix-expressions","children":[]},{"level":3,"title":"Infix expressions","slug":"infix-expressions","link":"#infix-expressions","children":[]},{"level":3,"title":"Postfix expressions","slug":"postfix-expressions","link":"#postfix-expressions","children":[]},{"level":3,"title":"Comparison expressions","slug":"comparison-expressions","link":"#comparison-expressions","children":[]},{"level":3,"title":"Function calls","slug":"function-calls","link":"#function-calls","children":[]}]},{"level":2,"title":"Literals","slug":"literals","link":"#literals","children":[{"level":3,"title":"String literals","slug":"string-literals","link":"#string-literals","children":[]},{"level":3,"title":"Integer literals","slug":"integer-literals","link":"#integer-literals","children":[]},{"level":3,"title":"Nil literal","slug":"nil-literal","link":"#nil-literal","children":[]},{"level":3,"title":"Float literals","slug":"float-literals","link":"#float-literals","children":[]},{"level":3,"title":"Boolean literals","slug":"boolean-literals","link":"#boolean-literals","children":[]},{"level":3,"title":"Array literals","slug":"array-literals","link":"#array-literals","children":[]}]}],"git":{"updatedTime":1707899257000,"contributors":[{"name":"SerhiiCho","email":"serhiicho@protonmail.com","commits":32}]},"filePathRelative":"1.x/language-elements/index.md"}');export{v as comp,b as data};
