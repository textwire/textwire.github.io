import{_ as n,o as a,c as t,a as e}from"./app-hzkfhhtc.js";const s={},o=e(`<h1 id="usage-with-templates" tabindex="-1"><a class="header-anchor" href="#usage-with-templates" aria-hidden="true">#</a> Usage with Templates</h1><p>One of the main Textwire features is the ability to use it as a template engine for Go projects. Using it as template engine is split into 3 steps:</p><ol><li>Create a template file with the extension <code>.textwire.html</code></li><li>Parse the template file using the <code>textwire.ParseTemplate</code> function</li><li>Evaluate the template file using the <code>Evaluate</code> function on the parsed template</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">homeHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>   <span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">:=</span> tpl<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// handle error</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We first parse the template because it is more efficient to parse the template once when the application starts and then evaluate it when certain routes are called.</p><p>The <code>textwire.ParseTemplate</code> function accepts a string as its only argument. This string is the name of the template file without the extension. In this example, we have a template file called <code>home.textwire.html</code> and we pass the name of the file without the extension, which is <code>home</code>.</p><p>In return, we get a <code>Template</code> object that we can use to evaluate the template. The <code>EvaluateResponse</code> function accepts a <code>http.ResponseWriter</code> object and a map of variables that we want to inject into the template. The <code>EvaluateResponse</code> function will then evaluate the parsed template and print the result to the <code>http.ResponseWriter</code> object.</p><h2 id="layouts" tabindex="-1"><a class="header-anchor" href="#layouts" aria-hidden="true">#</a> Layouts</h2><p>Defining a layout in Textwire is very simple. You need to create a file anywhere inside of your template files. Many developers just create a &quot;layouts&quot; directory for different layouts because you might have a main layout, one for admin panel, one for user cabinet and so on.</p><h3 id="reserve-space-in-the-layout" tabindex="-1"><a class="header-anchor" href="#reserve-space-in-the-layout" aria-hidden="true">#</a> Reserve space in the layout</h3><p>The <code>reserve</code> statement (directive) is used to reserve a place for dynamic content that you can insert later in the layout. For example, you can reserve a place for the title of the page and then insert it later. Here is an example:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>@reserve(&quot;title&quot;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    @reserve(&quot;content&quot;)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We reserve a place for the title and content of the page. We can then insert the title and content into these reserved places.</p><h3 id="insert-content-into-reserved-space" tabindex="-1"><a class="header-anchor" href="#insert-content-into-reserved-space" aria-hidden="true">#</a> Insert content into reserved space</h3><p>The <code>insert</code> statement (directive) is used to insert content into reserved places. Insert statement can be defined in 2 ways, with and without the body. In the example below, we define the insert for &quot;title&quot; without the body, and for &quot;content&quot; with the body.</p><p>Let&#39;s take a look at the example how I would define a <code>home.textwire.html</code> and then I&#39;ll explain each part of it:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>@use(&quot;layouts/main&quot;)

@insert(&quot;title&quot;, &quot;Home page&quot;)

@insert(&quot;content&quot;)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a home page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>First, we tell which layout we want to use by providing a path to the layout</li><li>Then we insert the title into layout with the value &quot;Home page&quot;</li><li>Then we insert the content into layout with the HTML body.</li></ul><p>You can read more about <a href="/1.x/language-elements#use-statement">use</a>, <a href="/1.x/language-elements#insert-statement">insert</a> and <a href="/1.x/language-elements#reserve-statement">reserve</a> statements on the <a href="/1.x/language-elements#statements">statements</a> page if you need more information about the syntax.</p>`,19),p=[o];function l(i,c){return a(),t("div",null,p)}const r=n(s,[["render",l],["__file","index.html.vue"]]);export{r as default};
