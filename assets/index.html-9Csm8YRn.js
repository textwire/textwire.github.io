import{_ as a,o as n,c as s,a as e}from"./app-PZ9dh4FG.js";const t={},o=e(`<h1 id="language-elements" tabindex="-1"><a class="header-anchor" href="#language-elements" aria-hidden="true">#</a> Language Elements</h1><p>Textwire is designed to be easy to use for Go developers. It has a similar syntax to Go, but it is a separate language and has specific grammar to make it easier to use as a template language.</p><h2 id="rules" tabindex="-1"><a class="header-anchor" href="#rules" aria-hidden="true">#</a> Rules</h2><ul><li>All the HTML files that you want to parse with Textwire must have a <code>.textwire.html</code> extension.</li><li>All the Textwire code must be inside of the <code>{{ }}</code> brackets.</li><li>You must use only a single statement inside <code>{{ }}</code> brackets. <code>{{ &lt;statement&gt; }}</code></li></ul><p>All the bracket statements return either an empty string or a string. For example, <code>{{ x := 5 }}</code> will return an empty string, but <code>{{ 5 + 5 }}</code> will return &quot;10&quot;.</p><p>There are special bracket statements that need to be closed with <code>{{ end }}</code> keyword. For example, <a href="#if-statements">if statements</a> and <a href="#for-statements">for statements</a>.</p><p>Let&#39;s take a look at what features are available (âœ…) in Textwire and what features are still in development (ðŸš§).</p><ul><li>Statements <ul><li>âœ… <a href="#if-statements">If statements</a> <code>{{ if x == 1 }}</code></li><li>âœ… <a href="#variable-declaration">Variable declaration</a> <code>{{ x := 5 }}</code> or <code>{{ var y = 10 }}</code></li><li>âœ… <a href="#layout-statement">Layout statement</a> <code>{{ layout &quot;main&quot; }}</code></li><li>âœ… <a href="#insert-statement">Insert statement</a> <code>{{ insert &quot;title&quot;, &quot;Home&quot; }}</code></li><li>âœ… <a href="#reserve-statement">Reserve statement</a> <code>{{ reserve &quot;title&quot; }}</code></li><li>ðŸš§ <a href="#for-statements">For statements</a> <code>{{ for i, name := range names }}</code></li></ul></li><li>Expressions <ul><li>âœ… <a href="#ternary-expressions">Ternary expressions</a> <code>{{ x ? y : z }}</code></li><li>âœ… <a href="#prefix-expressions">Prefix expressions</a> <code>{{ !x</code> or <code>-x }}</code></li><li>âœ… <a href="#infix-expressions">Infix expressions</a> <code>{{ x * (y + 3) }}</code></li><li>âœ… <a href="#postfix-expressions">Postfix expressions</a> <code>{{ x++ }}</code> or <code>{{ x-- }}</code></li><li>âœ… <a href="#comparison-expressions">Comparison expressions</a> <code>{{ x == y }}</code> or <code>{{ x &lt; y }}</code></li><li>ðŸš§ <a href="#function-calls">Function calls</a> <code>{{ name.split(&quot; &quot;) }}</code></li></ul></li><li>Literals <ul><li>âœ… <a href="#string-literals">String literals</a> <code>{{ &quot;Hello, World!&quot; }}</code> or <code>{{ \`Hello, World!\` }}</code></li><li>âœ… <a href="#integer-literals">Integer literals</a> <code>{{ 123 }}</code> or <code>{{ -234 }}</code></li><li>âœ… <a href="#float-literals">Float literals</a> <code>{{ 123.456 }}</code></li><li>âœ… <a href="#boolean-literals">Boolean literals</a> <code>{{ true }}</code></li><li>âœ… <a href="#nil-literal">Nil literal</a> <code>{{ nil }}</code></li><li>âœ… <a href="#array-literals">Array literals</a> <code>{{ [1, 2, 3] }}</code></li></ul></li></ul><h2 id="types-and-literals" tabindex="-1"><a class="header-anchor" href="#types-and-literals" aria-hidden="true">#</a> Types and Literals</h2><p>Textwire has a different type system that Go. When you pass a variable to Textwire, it will be automatically converted to a Textwire type. Here is a list of supported types that you can pass to Textwire or define in Textwire:</p><table><thead><tr><th>Textwire type</th><th>Equivalent Go types</th></tr></thead><tbody><tr><td><code>Str</code></td><td><code>string</code></td></tr><tr><td><code>Bool</code></td><td><code>bool</code></td></tr><tr><td><code>Int</code></td><td><code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code></td></tr><tr><td><code>Float</code></td><td><code>float32</code>, <code>float64</code></td></tr><tr><td><code>Nil</code></td><td><code>nil</code></td></tr><tr><td><code>Array</code></td><td><code>[]string</code>, <code>[]bool</code>, <code>[]int</code>, <code>[]int64</code>, <code>[]int32</code>, <code>[]int16</code>, <code>[]int8</code>, <code>[]uint</code>, <code>[]uint64</code>, <code>[]uint32</code>, <code>[]uint16</code>, <code>[]uint8</code>, <code>[]float64</code>, <code>[]float32</code></td></tr></tbody></table><p>The biggest difference in types and type literals between Textwire and Go is that Textwire&#39;s literals have functions that you can call on them. For example, you can call a <code>split</code> function on a string literal like this: <code>{{ &quot;hello world&quot;.split(&quot; &quot;) }}</code> to get an array of strings <code>[&quot;hello&quot;, &quot;world&quot;]</code>.</p><h2 id="statements" tabindex="-1"><a class="header-anchor" href="#statements" aria-hidden="true">#</a> Statements</h2><h3 id="if-statements" tabindex="-1"><a class="header-anchor" href="#if-statements" aria-hidden="true">#</a> If statements</h3><p>You can use if statements to conditionally render content. Here is an example of using if statements:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if name == &quot;Anna&quot; }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Her name is Anna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use else and else if statements:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if x == 1 }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ else if x == 2 }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ else }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is not 1 and 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-statements" tabindex="-1"><a class="header-anchor" href="#for-statements" aria-hidden="true">#</a> For statements</h3><p>You can use &quot;for statements&quot; to iterate over arrays. There are <strong>2 ways</strong> to use for statements in Textwire. Here are examples of using for loops:</p><h4 id="for-loop" tabindex="-1"><a class="header-anchor" href="#for-loop" aria-hidden="true">#</a> For loop</h4><p>This is a basic for loop that you can use. It has a declaration, condition and post statement. <code>for &lt;declaration&gt;; &lt;condition&gt;; &lt;post&gt;</code>. They are all optional. Here is an example of using for loop:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ names := [&quot;Ann&quot;, &quot;Serhii&quot;] }}

{{ for i := 0; i &lt; names.len(); i++ }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ names[i] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="range-loop" tabindex="-1"><a class="header-anchor" href="#range-loop" aria-hidden="true">#</a> Range loop</h4><p>For range loop is similar to the &quot;range&quot; loop in Go. It returns an index and a value of an array. Here is an example of using for range loop:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ names := [&quot;Ann&quot;, &quot;Serhii&quot;] }}

{{ for _, name := range names }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="variable-declaration" tabindex="-1"><a class="header-anchor" href="#variable-declaration" aria-hidden="true">#</a> Variable declaration</h3><p>You can declare variables in 2 ways, either by using the <code>:=</code> operator or by using the <code>var</code> keyword. Here is an example of declaring variables:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ x := 5 }}
{{ var y = 10 }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Variable declaration statements are not expressions! They don&#39;t return any value and can&#39;t be used inside of other expressions.</p></blockquote><h3 id="layout-statement" tabindex="-1"><a class="header-anchor" href="#layout-statement" aria-hidden="true">#</a> Layout statement</h3><p>You can use layout statement to define a layout for your template file. Here is an example of using layout statement:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ layout &quot;layouts/main&quot; }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Layout statement excepts a string literal as an argument. The string literal should be a path to the layout file relative to a <code>TemplateDir</code> parameter that you set in the config. For example, if you set <code>TemplateDir</code> to <code>&quot;src/templates/layouts&quot;</code>, then you can use the layout statement like <code>{{ layout &quot;main&quot; }}</code> and it will look for the layout file in <code>&quot;src/templates/layouts/main.textwire.html&quot;</code>.</p><h3 id="insert-statement" tabindex="-1"><a class="header-anchor" href="#insert-statement" aria-hidden="true">#</a> Insert statement</h3><p>You can use insert statement to insert content into reserved places. You cannot use <code>insert</code> without defining a <code>layout</code> in the same file. Here is an example of using insert statement:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ layout &quot;layouts/main&quot; }}

{{ insert &quot;title&quot;, &quot;Home page&quot; }}

{{ insert &quot;content&quot; }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a home page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Insert statement excepts 2 arguments, the name of the reserved place and the optional content that you want to insert into the reserved place.</p><p>All the <code>insert</code> statements will be transferred to the layout file and will be placed into reserved places defined by a <a href="#reserve-statement">reserve statement</a>.</p><h3 id="reserve-statement" tabindex="-1"><a class="header-anchor" href="#reserve-statement" aria-hidden="true">#</a> Reserve statement</h3><p>When you define a layout file for you template, you need to reserve places for dynamic content. You can reserve a place for a title, content, sidebar, footer and so on. Here is an example of using reserve statement:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ locale }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{{ reserve &quot;title&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    {{ reserve &quot;content&quot; }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reserve statement excepts only a single argument, which the name of the reserved place. This name will be used in the <a href="#insert-statement">insert statement</a> to insert content into the reserved place.</p><h2 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions" aria-hidden="true">#</a> Expressions</h2><h3 id="ternary-expressions" tabindex="-1"><a class="header-anchor" href="#ternary-expressions" aria-hidden="true">#</a> Ternary expressions</h3><p>You can use ternary expressions to conditionally render content. Here is an example of using ternary expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x == 1 ? &quot;yes&quot; : &quot;no&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The advantage of a &quot;ternary expression&quot; over &quot;if statement&quot; is that it can be use inside of any other expressions.</p><h3 id="prefix-expressions" tabindex="-1"><a class="header-anchor" href="#prefix-expressions" aria-hidden="true">#</a> Prefix expressions</h3><p>You can use prefix expressions to negate or invert a boolean value. Here is an example of using prefix expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ !isTall ? &quot;Not tall&quot; : &quot;Is tall&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ -x }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="infix-expressions" tabindex="-1"><a class="header-anchor" href="#infix-expressions" aria-hidden="true">#</a> Infix expressions</h3><p>You can use infix expressions to perform arithmetic operations. Here is an example of using infix expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x + y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Addition --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x - y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Subtraction --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x * y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Multiplication --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x / y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Division --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ x % y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Modulo --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ (x + 2) / (y * (4 - c)) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Grouped expressions --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postfix-expressions" tabindex="-1"><a class="header-anchor" href="#postfix-expressions" aria-hidden="true">#</a> Postfix expressions</h3><p>You can use postfix expressions to increment or decrement a variable. Here is an example of using postfix expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x++ }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Increment --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ x-- }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Decrement --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comparison-expressions" tabindex="-1"><a class="header-anchor" href="#comparison-expressions" aria-hidden="true">#</a> Comparison expressions</h3><p>Comparison expressions produce a boolean value. Here is an example of using comparison expressions:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if x == 1 }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="supported-operators" tabindex="-1"><a class="header-anchor" href="#supported-operators" aria-hidden="true">#</a> Supported operators</h4><p>All supported operators are listed in the table below:</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>==</code></td><td>Equal</td></tr><tr><td><code>!=</code></td><td>Not equal</td></tr><tr><td><code>&gt;</code></td><td>Greater</td></tr><tr><td><code>&lt;</code></td><td>Less</td></tr><tr><td><code>&gt;=</code></td><td>Greater or equal</td></tr><tr><td><code>&lt;=</code></td><td>Less or equal</td></tr></tbody></table><h3 id="function-calls" tabindex="-1"><a class="header-anchor" href="#function-calls" aria-hidden="true">#</a> Function calls</h3><p>You can use function calls to call functions. Textwire has a few built-in functions that you can use in your templates.</p><p>Functions in Textwire are type specific, which means that you can&#39;t call a function on a variable that is not of the same type as the function. For example, you can&#39;t call a <code>split</code> function on an integer variable.</p><p>Here is an example of using function calls:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ name.split(&quot; &quot;) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>You can read more about built-in functions in the <a href="#built-in-functions">Built-in Functions</a> section.</p></blockquote><h2 id="literals" tabindex="-1"><a class="header-anchor" href="#literals" aria-hidden="true">#</a> Literals</h2><h3 id="string-literals" tabindex="-1"><a class="header-anchor" href="#string-literals" aria-hidden="true">#</a> String literals</h3><p>You can use string literals and concatenate them with other strings. Here is an example of using string literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ &quot;Hello&quot; + &quot;World!&quot; }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>When you print a string, it will be automatically escaped. If you want to print a string without escaping it, you can use the a <code>raw</code> function on strings. Example: <code>{{ &quot;&lt;h1&gt;Test&lt;/h1&gt;&quot;.raw() }}</code></p></blockquote><h3 id="integer-literals" tabindex="-1"><a class="header-anchor" href="#integer-literals" aria-hidden="true">#</a> Integer literals</h3><p>You can use integer literals and perform arithmetic operations with them. Here is an example of using integer literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ 1 + 2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="nil-literal" tabindex="-1"><a class="header-anchor" href="#nil-literal" aria-hidden="true">#</a> Nil literal</h3><p>You can use nil literal to check if a variable is nil. Here is an example of using nil literal:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if x == nil }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x is nil<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="float-literals" tabindex="-1"><a class="header-anchor" href="#float-literals" aria-hidden="true">#</a> Float literals</h3><p>You can use float literals and perform arithmetic operations with them. Here is an example of using float literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ 1.5 + 2.5 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="boolean-literals" tabindex="-1"><a class="header-anchor" href="#boolean-literals" aria-hidden="true">#</a> Boolean literals</h3><p>You can use boolean literals to check if a variable is true or false. Here is an example of using boolean literals:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ if isTall == true }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Is tall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-literals" tabindex="-1"><a class="header-anchor" href="#array-literals" aria-hidden="true">#</a> Array literals</h3><p>Defining an array in Textwire is done is a similar way as in other languages. Here is an example of defining an array:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ names := [&quot;John&quot;, &quot;Jane&quot;, &quot;Jack&quot;] }}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    {{ for index, name := names }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ index }}: {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    {{ end }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can access values in an array by using an index. Here is an example of accessing values in an array:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ names := [&quot;John&quot;, &quot;Jane&quot;, &quot;Jack&quot;] }}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ names[0] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- &quot;John&quot; --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ names[1] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- &quot;Jane&quot; --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ names[2] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- &quot;Jack&quot; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="built-in-functions" tabindex="-1"><a class="header-anchor" href="#built-in-functions" aria-hidden="true">#</a> Built-in functions</h2><p>Textwire has a few buit-in functions that you can use in your templates.</p><h3 id="string-functions" tabindex="-1"><a class="header-anchor" href="#string-functions" aria-hidden="true">#</a> String functions</h3><table><thead><tr><th>Function</th><th>Description</th><th>Arguments</th><th>Example</th></tr></thead><tbody><tr><td><code>raw</code></td><td>Prints a string without escaping it</td><td><code>raw()</code></td><td><code>{{ &quot;&lt;h1&gt;Test&lt;/h1&gt;&quot;.raw() }}</code></td></tr><tr><td><code>split</code></td><td>Splits a string into an array</td><td><code>split(separator string)</code></td><td><code>{{ &quot;Serhii Cho&quot;.split(&quot; &quot;) }}</code></td></tr><tr><td><code>trim</code></td><td>Trims a string from spaces and special characters like <code>\\t\\n\\r</code></td><td><code>trim()</code></td><td><code>{{ &quot; Anna &quot;.trim() }}</code></td></tr></tbody></table>`,95),l=[o];function i(p,c){return n(),s("div",null,l)}const d=a(t,[["render",i],["__file","index.html.vue"]]);export{d as default};
