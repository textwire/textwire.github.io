import{_ as e,o as t,c as a,a as n}from"./app-VEemRReD.js";const i={},s=n(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><p>Welcome to Textwire, a powerful templating interpreter designed for Go developers. Textwire provides a seamless way to inject variables into your HTML files, making it easier to create dynamic and data-driven content. This guide will walk you through the essential steps to get started with Textwire in your Go projects.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Install the Textwire package in your Go environment. You can do this by running the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get <span class="token parameter variable">-u</span> github.com/textwire/textwire
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>To apply configurations to Textwire, you need to import the <code>github.com/textwire/textwire</code> package in your main Go file and use the <code>NewConfig</code> function to specify the configurations. The <code>NewConfig</code> function accepts a <code>Config</code> struct as its only argument.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    textwire<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>textwire<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
        <span class="token comment">// Configurations go here</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Non of the configurations are required, especially if you are using Textwire not as a template engine but as program to inject dynamic content into files. You can read more about that in the <a href="#interpreter">Interpreter</a> section.</p><h3 id="available-configurations" tabindex="-1"><a class="header-anchor" href="#available-configurations" aria-hidden="true">#</a> Available Configurations</h3><table><thead><tr><th>Property</th><th>Type</th><th>Description of the configuration</th><th>Example value</th><th>Default value</th></tr></thead><tbody><tr><td><code>TemplateDir</code></td><td><code>string</code></td><td>The directory where Textwire will look for template files</td><td><code>&quot;src/templates&quot;</code></td><td><code>&quot;templates&quot;</code></td></tr><tr><td><code>TemplateExt</code></td><td><code>string</code></td><td>The extension of the template files</td><td><code>&quot;.textwire.html&quot;</code></td><td><code>&quot;.textwire.html&quot;</code></td></tr></tbody></table><h3 id="example-of-setting-configurations" tabindex="-1"><a class="header-anchor" href="#example-of-setting-configurations" aria-hidden="true">#</a> Example of setting configurations</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    textwire<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>textwire<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
        TemplateDir<span class="token punctuation">:</span> <span class="token string">&quot;src/templates&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interpreter" tabindex="-1"><a class="header-anchor" href="#interpreter" aria-hidden="true">#</a> Interpreter</h2><p>You can use Textwire to parse and evaluate a string that contains Textwire syntax. This is useful if you want to inject dynamic content into an email template or a markdown file. It could be anything really. You can still use all the Textwire features like &quot;if statements&quot;, &quot;for statements&quot;, &quot;ternary expressions&quot; and so on.</p><p>There are 2 ways of how to do it, either by interpreting a string or by interpreting a file. Let&#39;s look at both ways.</p><h3 id="interpret-a-string" tabindex="-1"><a class="header-anchor" href="#interpret-a-string" aria-hidden="true">#</a> Interpret a string</h3><p>todo: here</p><h3 id="interpret-a-file" tabindex="-1"><a class="header-anchor" href="#interpret-a-file" aria-hidden="true">#</a> Interpret a file</h3><p>todo: here</p><h3 id="textwire-as-a-template-engine" tabindex="-1"><a class="header-anchor" href="#textwire-as-a-template-engine" aria-hidden="true">#</a> Textwire as a template engine</h3><p>If you want to know how to use Textwire as a template engine, you can read the <a href="/1.x/usage-with-templates">Usage with Templates</a> page.</p>`,22),o=[s];function r(c,d){return t(),a("div",null,o)}const p=e(i,[["render",r],["__file","index.html.vue"]]);export{p as default};
